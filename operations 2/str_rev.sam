// str_rev
// Input: Memory Address
// Output: Memory Address
// Description: Allocates a new string and copies the string at the input memory address into the new
//              string in reverse order.  Places the address of the new string on the stack.

//PUSHIMMSTR "test string"
DUP
STOREABS 3001 // starting memory address
DUP 
STOREABS 3000 // current pointer
DUP
iterate1:
    PUSHIND
    DUP
    PUSHIMMCH '\0'
    EQUAL
    JUMPC alloc
    PUSHABS 3000
    PUSHIMM 1 
    ADD
    DUP
    STOREABS 3000
    JUMP iterate1
alloc:
    ADDSP -1
    PUSHABS 3000
    PUSHABS 3001
    SUB
    DUP
    STOREABS 3002 // length
    PUSHIMM 1 
    ADD
    MALLOC
    DUP
    STOREABS 3001 // starting memory address
    DUP 
    STOREABS 3000 // current pointer
    PUSHABS 3002
    PUSHIMM 0
    EQUAL
    JUMPC final
write:
    PUSHIMM 1 
    PUSHABS 3002
    EQUAL
    JUMPC push
    PUSHABS 3002
    PUSHIMM 1
    SUB
    STOREABS 3002
    SWAP
    STOREIND
    PUSHABS 3000
    PUSHIMM 1 
    ADD 
    DUP
    STOREABS 3000
    //SWAP
    JUMP write
push:
    SWAP
    STOREIND
    PUSHABS 3000
    PUSHIMM 1
    ADD
final:
    PUSHIMMCH '\0'
    STOREIND 
    ADDSP -1
    PUSHABS 3001
//STOP
